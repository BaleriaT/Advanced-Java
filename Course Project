import java.util.Scanner;
import java.util.logging.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;

public class Module2 {
    private static final Logger logger = Logger.getLogger(Module2.class.getName());

    public static void main(String[] args) {
        // Create a console handler
        ConsoleHandler handler = new ConsoleHandler();
        
        // Create a custom formatter
        handler.setFormatter(new MyFormatter());
        
        // Attach the handler to the logger
        logger.addHandler(handler);
        
        // Set global log level
        logger.setLevel(Level.INFO);
        
        char choice;

        do {
            logger.info("================================");
            logger.info("Welcome to the Book Inventory System"); //Welcoming individual to the inventory system
            logger.info("Please make your selection");
            logger.info("Enter S to search for products\nEnter G to see all products\nEnter M to modify products\nEnter N to add a new user\nEnter A to add new products\nEnter Q to quit"); //Asking individual to chose from an option
            logger.info("================================\n\n");

            Scanner kb = new Scanner(System.in);
            choice = kb.next().charAt(0);

            ProductManager productManager = new ProductManager();

            switch (choice) {
                case 'S': //Option can either be a Cap letter or a lower case letter
                case 's':
                    productManager.searchProduct(); //Calling the method forward
                    break;
                case 'G': //Option can either be a Cap letter or a lower case letter
                case 'g':
                    productManager.getAllProducts(); //Calling the method forward
                    break;
                case 'M': //Option can either be a Cap letter or a lower case letter
                case 'm':
                    productManager.modifyProduct(); //Calling the method forward
                    break;
                case 'Q': //Option can either be a Cap letter or a lower case letter
                case 'q':
                    break;
                case 'N': //Option can either be a Cap letter or a lower case letter
                case 'n':
                    productManager.newUser(); //Calling the method forward
                    break;
                case 'A': //Option can either be a Cap letter or a lower case letter
                case 'a':
                    productManager.newProduct(); //Calling the method forward
                    break;
                default:
                    logger.info("You entered an invalid input. Please try again."); //If individual entered an invalid option it will display this line
            }
        } while (choice != 'Q' && choice != 'q'); //exiting the do loop if the user decides to quit

        logger.info("================================");
        logger.info("Thank you for using the Book Inventory System"); //Thanking the user for using the inventory system
        logger.info("================================");
    }
}

class ProductManager {
	
	private Connection connect = null;
	private Statement statement = null;
	private PreparedStatement ps = null;
	private ResultSet rs = null;

    public void getAllProducts() {
    	try {
    		// Method to get all products from the database and print/output data
            System.out.println("Getting all products from the database...");
    		connect = DriverManager.getConnection("jdbc:mysql://localhost/books", "root", "Hogwarts1992!");
    		statement = connect.createStatement();
    		rs = statement.executeQuery("Select * from products");
    		
    		while (rs.next()) {
    		
    			String name = rs.getString("name");
    			float cost = rs.getFloat("cost");
    			String Author = rs.getString("Author");
    			System.out.println("Name: " + name + ", Cost: " + cost + ", Author: " + Author);
    		}
    	}
    	catch (Exception ex) {
    		System.out.println("Error: " + ex.getMessage());
    	}
        
       
        
    }

    public void searchProduct() {
        try {
	        // Establishing connection to the database
	        connect = DriverManager.getConnection("jdbc:mysql://localhost/books", "root", "Hogwarts1992!");

	        // Getting user input for product name
	        Scanner myObj = new Scanner(System.in);
	        System.out.println("Enter the name of the product to search:");
	        String productName = myObj.nextLine();

	        // Creating a PreparedStatement for parameterized query
	        PreparedStatement preparedStatement = connect.prepareStatement("SELECT * FROM products WHERE name LIKE ?");
	        preparedStatement.setString(1, "%" + productName + "%");

	        // Executing the query
	        rs = preparedStatement.executeQuery();

	        // Printing the search results
	        while (rs.next()) {
	            String name = rs.getString("name");
	            float cost = rs.getFloat("cost");
	            String author = rs.getString("Author");
	            System.out.println("Name: " + name + ", Cost: " + cost + ", Author: " + author);
	        }

	        // Closing the PreparedStatement
	        preparedStatement.close();
	    } catch (Exception ex) {
	        System.out.println("Error: " + ex.getMessage());
	    }
    }

    public void newUser() {
        // Method to add a new user
        System.out.println("Adding a new user...");
    }

    public void newProduct() {
        try {
            // Establishing connection to the database
            connect = DriverManager.getConnection("jdbc:mysql://localhost/books", "root", "Hogwarts1992!");

            // Creating a PreparedStatement for parameterized query
            PreparedStatement preparedStatement = connect.prepareStatement("INSERT INTO products (name, cost, Author) VALUES (?, ?, ?)");

            // Getting user input for name, cost, and author
            Scanner myObj = new Scanner(System.in);
            System.out.println("Enter name of the book:");
            String name = myObj.nextLine();
            System.out.println("Enter cost of the book:");
            float cost = myObj.nextFloat();
            myObj.nextLine(); // Consume newline
            System.out.println("Enter author of the book:");
            String author = myObj.nextLine();

            // Setting parameters for PreparedStatement
            preparedStatement.setString(1, name);
            preparedStatement.setFloat(2, cost);
            preparedStatement.setString(3, author);

            // Executing the INSERT statement
            int rowsInserted = preparedStatement.executeUpdate();
            if (rowsInserted > 0) {
                System.out.println("A new product was inserted successfully!");
            } else {
                System.out.println("Failed to insert the product.");
            }

            // Closing the PreparedStatement
            preparedStatement.close();
        } catch (Exception ex) {
            System.out.println("Error: " + ex.getMessage());
        }
    }

    public void modifyProduct() {
        // Method to modify a product
        System.out.println("Modifying a product...");
    }
}

// Custom formatter class
class MyFormatter extends Formatter {
    @Override
    public String format(LogRecord record) {
        return "[" + record.getLevel() + "] " + record.getMessage() + "\n";
    }
}
